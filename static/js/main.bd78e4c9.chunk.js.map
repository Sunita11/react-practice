{"version":3,"sources":["utility/constant.js","images/ahmedabad.svg","images/bengaluru.svg","images/chennai.svg","images/delhi.svg","images/hyderabad.svg","images/kolkata.svg","images/mumbai.svg","images/pune.svg","images/city.jpg","utility/utils.js","component/aqi/aqi.js","component/main/main.js","reportWebVitals.js","index.js"],"names":["ClassNameForIndexLevel","Utils","getIndexLevelClass","index","getImageResource","city","ahmedabad","bengaluru","chennai","delhi","hyderabad","kolkata","mumbai","pune","defaultImg","getRandomInt","min","max","Math","floor","random","getColor","AQI","props","className","data","length","map","item","cellData","aqi","indexLevelClass","console","log","cityName","toLowerCase","style","backgroundColor","src","alt","parseFloat","toFixed","_getTableCell","Main","timeout","connect","connectInterval","ws","WebSocket","onopen","setState","clearTimeout","onmessage","evt","message","JSON","parse","dataFromServer","onclose","e","reason","setTimeout","check","onerror","err","error","close","state","readyState","CLOSED","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd78e4c9.chunk.js","sourcesContent":["export const ClassNameForIndexLevel = {\n  hazardous: \"hazardous\",\n  veryUnhealthy: \"very-unhealthy\",\n  unhealthy: \"unhealthy\",\n  unhealthyForSensitiveGroups: \"unhealthy-for-sensitive-groups\",\n  moderate: \"moderate\",\n  good: \"good\",\n};\n","export default __webpack_public_path__ + \"static/media/ahmedabad.a23927de.svg\";","export default __webpack_public_path__ + \"static/media/bengaluru.2f57a5d7.svg\";","export default __webpack_public_path__ + \"static/media/chennai.42e922e0.svg\";","export default __webpack_public_path__ + \"static/media/delhi.75d9be14.svg\";","export default __webpack_public_path__ + \"static/media/hyderabad.1ca866a5.svg\";","export default __webpack_public_path__ + \"static/media/kolkata.2fce14d0.svg\";","export default __webpack_public_path__ + \"static/media/mumbai.3125d285.svg\";","export default __webpack_public_path__ + \"static/media/pune.b4bde8f6.svg\";","export default __webpack_public_path__ + \"static/media/city.0a071b0d.jpg\";","import { ClassNameForIndexLevel } from \"./constant\";\nimport ahmedabad from \"./../images/ahmedabad.svg\";\nimport bengaluru from \"./../images/bengaluru.svg\";\nimport chennai from \"./../images/chennai.svg\";\nimport delhi from \"./../images/delhi.svg\";\nimport hyderabad from \"./../images/hyderabad.svg\";\nimport kolkata from \"./../images/kolkata.svg\";\nimport mumbai from \"./../images/mumbai.svg\";\nimport pune from \"./../images/pune.svg\";\nimport defaultImg from \"./../images/city.jpg\";\n\nclass Utils {\n  static getIndexLevelClass = (index) => {\n    switch (true) {\n      case index > 300:\n        return ClassNameForIndexLevel.hazardous;\n      case index > 200:\n        return ClassNameForIndexLevel.veryUnhealthy;\n      case index > 150:\n        return ClassNameForIndexLevel.unhealthy;\n      case index > 100:\n        return ClassNameForIndexLevel.unhealthyForSensitiveGroups;\n      case index > 50:\n        return ClassNameForIndexLevel.moderate;\n      default:\n        return \"\";\n    }\n  };\n\n  static getImageResource = (city) => {\n    switch (city) {\n      case \"ahmedabad\":\n        return ahmedabad;\n      case \"bengaluru\":\n        return bengaluru;\n      case \"chennai\":\n        return chennai;\n      case \"delhi\":\n        return delhi;\n      case \"hyderabad\":\n        return hyderabad;\n      case \"kolkata\":\n        return kolkata;\n      case \"mumbai\":\n        return mumbai;\n      case \"pune\":\n        return pune;\n      default:\n        return defaultImg;\n    }\n  };\n\n  static getRandomInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  static getColor = () => {\n    const r = this.getRandomInt(0, 255);\n    const g = this.getRandomInt(0, 255);\n    const b = this.getRandomInt(0, 255);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \", 0.15)\";\n  };\n}\n\nexport default Utils;\n","import React from \"react\";\nimport \"./style.css\";\nimport Utils from \"./../../utility/utils\";\n\nconst AQI = (props) => {\n  /* \n        @function _getImageResource: return image based on city name\n        city: city name\n    */\n  const _getTableCell = (cellData) => {\n    const { city, aqi } = cellData;\n    const indexLevelClass = Utils.getIndexLevelClass(Math.floor(aqi));\n    console.log(\"indexLevelClass: \", indexLevelClass);\n    let cityName = `${city.toLowerCase()}`;\n    return (\n      <div\n        className=\"cell-data\"\n        style={{ backgroundColor: `${Utils.getColor()}` }}\n      >\n        <div className=\"city-image-wrapper\">\n          <img src={Utils.getImageResource(cityName)} alt={cityName} />\n        </div>\n\n        <span className=\"city-name\">{city}</span>\n        <span className={`city-aqi ${indexLevelClass}`}>\n          {parseFloat(aqi).toFixed(2)}\n        </span>\n      </div>\n    );\n  };\n\n  const _getTableBody = () => {\n    let items = props.data.map((item) => _getTableCell(item));\n    return items;\n  };\n\n  return (\n    <div className=\"aqi-wrapper\">\n      <div className=\"table-header\">\n        <span>Cities</span>\n        <span>AQI</span>\n      </div>\n      <div className=\"table-body\">\n        {props.data != null && props.data.length > 0 ? (\n          _getTableBody()\n        ) : (\n          <div className=\"empty-state\">No Data available</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AQI;\n","import React from \"react\";\nimport AQI from \"./../aqi/aqi\";\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ws: null,\n    };\n  }\n\n  // single websocket instance for the own application and constantly trying to reconnect.\n  componentDidMount() {\n    this.connect();\n  }\n\n  timeout = 250; // Initial timeout duration as a class variable\n\n  /**\n   * @function connect\n   * This function establishes the connect with the websocket and also ensures constant reconnection if connection closes\n   */\n  connect = () => {\n    var ws = new WebSocket(\"ws://city-ws.herokuapp.com/\");\n    var connectInterval;\n\n    // websocket onopen event listener\n    ws.onopen = () => {\n      console.log(\"connected websocket main component\");\n\n      this.setState({ ws: ws });\n\n      this.timeout = 250; // reset timer to 250 on open of websocket connection\n      clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n    };\n\n    ws.onmessage = (evt) => {\n      const message = JSON.parse(evt.data);\n      this.setState({ dataFromServer: message });\n      console.log(message);\n    };\n\n    // websocket onclose event listener\n    ws.onclose = (e) => {\n      console.log(\n        `Socket is closed. Reconnect will be attempted in ${Math.min(\n          10000 / 1000,\n          (this.timeout + this.timeout) / 1000\n        )} second.`,\n        e.reason\n      );\n\n      this.timeout = this.timeout + this.timeout; //increment retry interval\n      connectInterval = setTimeout(this.check, Math.min(10000, this.timeout)); //call check function after timeout\n    };\n\n    // websocket onerror event listener\n    ws.onerror = (err) => {\n      console.error(\n        \"Socket encountered error: \",\n        err.message,\n        \"Closing socket\"\n      );\n\n      ws.close();\n    };\n  };\n\n  check = () => {\n    const { ws } = this.state;\n    if (!ws || ws.readyState === WebSocket.CLOSED) this.connect(); //check if websocket instance is closed, if so call `connect` function.\n  };\n\n  render() {\n    const { dataFromServer } = this.state;\n    // console.log(\"message: \", dataFromServer);\n    return (\n      <div>\n        <AQI data={dataFromServer} />\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Main from \"./component/main/main\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}